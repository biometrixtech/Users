# A template that creates an environment
# Version: da39a3ee5e6b4b0d3255bfef95601890afd80709
#
# Copyright 2017 Melon Software Ltd (UK), all rights reserved.  Used under license.
#
AWSTemplateFormatVersion: "2010-09-09"
Description: "Creates an environment for user management"

Parameters:

    # Environment name
    Environment:
        Type: "String"
        Description: "The name of the environment"

    DynamodbReadCapacity:
        Default: 1
        Description: "The read capacity of the DynamoDb table"
        MinValue: 1
        Type: "Number"

    DynamodbWriteCapacity:
        Default: 1
        Description: "The write capacity of the DynamoDb table"
        MinValue: 1
        Type: "Number"

Mappings:
    TemplateVersion:
        Self: { Commit: "da39a3ee5e6b4b0d3255bfef95601890afd80709" }
        Infrastructure: { Commit: "2d222e78ee364e58b7db1709f89effdf4d1d4c7d" }
        
Resources:

    ##########################################################################################################
    ##  DATABASE
    ##########################################################################################################

    UsersTable:
        Type: "AWS::DynamoDB::Table"
        Properties:
            TableName: { "Fn::Sub": "users-${Environment}-users" }
            AttributeDefinitions:
              - { AttributeName: "id", AttributeType: "S" }
            KeySchema:
              - { AttributeName: "id", KeyType: "HASH" }
            ProvisionedThroughput:
                ReadCapacityUnits: { Ref: "DynamodbReadCapacity" }
                WriteCapacityUnits: { Ref: "DynamodbWriteCapacity" }
        DeletionPolicy : "Retain"

    ##########################################################################################################
    ##  IOT
    ##########################################################################################################

    DevicePolicy:
        Type: "AWS::IoT::Policy"
        Properties:
          PolicyName: { "Fn::Sub": "users-${Environment}-device" }
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: "Allow"
                Action:
                  - "iot:Connect"
                Resource:
                  - "*"
              - Effect: "Allow"
                Action:
                  - "iot:Publish"
                  - "iot:Subscribe"
                Resource:
                  - { "Fn::Sub": "arn:aws:iot:${AWS::Region}:${AWS::AccountId}:topic/${!iot:Connection.Thing.ThingName}" }
                  
    DeviceTopicRule:
        Type: "AWS::IoT::TopicRule"
        Properties: 
            RuleName: { "Fn::Sub": "users-${Environment}-device" }
            TopicRulePayload:
                Sql: { "Fn::Sub": "SELECT * FROM 'users-${Environment}-device/#'" }
                Actions: 
                  - Lambda:
                        FunctionArn: { "Fn::GetAtt": [ "DeviceTopicLambda", "Arn" ] }

    DeviceTopicLambda:
        Type: "AWS::Lambda::Function"
        Properties:
            Code:
                ZipFile: |
                    def handler(event, _):
                        print(event)
            Environment:
                Variables:
                    ENVIRONMENT: { Ref: "Environment" }
            Handler: "index.handler"
            MemorySize: "256"
            Runtime: "python3.6"
            Timeout: "60"
            Role: { "Fn::GetAtt" : [ "ApiGatewayLambdaExecutionRole", "Arn" ] }
            FunctionName: { "Fn::Sub": "users-${Environment}-device-topicstream" }
            Tags:
              - { Key: "Name", Value: { "Fn::Sub": "users-${Environment}-device-topicstream" } }
              - { Key: "Management", Value: "managed" }
              - { Key: "Project", Value: "users" }
              - { Key: "Environment", Value: { Ref: "Environment" } }
              - { Key: "Service", Value: "device" }

    ##########################################################################################################
    ##  AUTHENTICATION
    ##########################################################################################################

    CustomAuthLambdaExecutionRole:
        Type: "AWS::IAM::Role"
        Properties:
            AssumeRolePolicyDocument:
                Version: "2012-10-17"
                Statement:
                  - Effect: "Allow"
                    Principal: { Service: [ "lambda.amazonaws.com" ] }
                    Action: "sts:AssumeRole"
            ManagedPolicyArns:
              - "arn:aws:iam::aws:policy/service-role/AWSLambdaVPCAccessExecutionRole"
            RoleName: { "Fn::Sub": "users-${Environment}-apigateway-authenticate-${AWS::Region}" }

    CustomAuthLambda:
        Type: "AWS::Lambda::Function"
        Properties:
            Code:
                S3Bucket: { "Fn::Sub": "biometrix-infrastructure-${AWS::Region}" }
                S3Key: { "Fn::Sub": [ "lambdas/users/${TemplateVersion}/custom_auth.zip", {
                    TemplateVersion: { "Fn::FindInMap": [ "TemplateVersion", "Self", "Commit" ] }
                } ] }
            Handler: "custom_auth.handler"
            Runtime: "python3.6"
            Timeout: "1"
            Role: { "Fn::GetAtt" : [ "CustomAuthLambdaExecutionRole", "Arn" ] }
            FunctionName: { "Fn::Sub": "users-${Environment}-apigateway-authenticate" }
            Tags:
              - { Key: "Name", Value: { "Fn::Sub": "users-${Environment}-apigateway-authenticate" } }
              - { Key: "Management", Value: "managed" }
              - { Key: "Project", Value: "users" }
              - { Key: "Environment", Value: { Ref: "Environment" } }
              - { Key: "Service", Value: "apigateway" }

    ##########################################################################################################
    ##  OUTPUTS
    ##########################################################################################################

    ApiGatewayLambdaExecutionRole:
        Type: "AWS::IAM::Role"
        Properties:
            AssumeRolePolicyDocument:
                Version: "2012-10-17"
                Statement:
                  - Effect: "Allow"
                    Principal: { Service: [ "lambda.amazonaws.com" ] }
                    Action: "sts:AssumeRole"
            ManagedPolicyArns:
              - "arn:aws:iam::aws:policy/service-role/AWSLambdaVPCAccessExecutionRole"
              - "arn:aws:iam::aws:policy/AWSXrayWriteOnlyAccess"
              - { "Fn::ImportValue": { "Fn::Sub": "QuerypostgresPolicyArn-${Environment}" } }
            Policies:
              - PolicyName: "default"
                PolicyDocument:
                    Version: "2012-10-17"
                    Statement:
                      - Action:
                          - "lambda:InvokeFunction"
                        Effect: "Allow"
                        Resource: { "Fn::Sub": "arn:aws:lambda:${AWS::Region}:${AWS::AccountId}:function:users-${Environment}-apigateway-authenticate" }
                      - Action:
                          - "secretsmanager:GetSecretValue"
                        Effect: "Allow"
                        Resource: { "Fn::Sub": "arn:aws:secretsmanager:${AWS::Region}:${AWS::AccountId}:secret:users/dev/*" }
                      - Action:
                          - "dynamodb:DeleteItem"
                          - "dynamodb:GetItem"
                          - "dynamodb:PutItem"
                          - "dynamodb:Query"
                          - "dynamodb:UpdateItem"
                        Effect: "Allow"
                        Resource:
                          - { "Fn::Sub": "${UsersTable.Arn}" }
                          - { "Fn::Sub": "${UsersTable.Arn}/*" }
                      - Action:
                          - "iot:AddThingToThingGroup"
                          - "iot:AttachPrincipalPolicy"
                          - "iot:AttachThingPrincipal"
                          - "iot:CreateKeysAndCertificate"
                          - "iot:CreateThing"
                          - "iot:DescribeThing"
                          - "iot:UpdateThing"
                        Effect: "Allow"
                        Resource: "*"
            RoleName: { "Fn::Sub": "users-${Environment}-apigateway-execute-${AWS::Region}" }

    ApiGatewayLambda:
        Type: "AWS::Lambda::Function"
        Properties:
            Code:
                S3Bucket: { "Fn::ImportValue": "InfrastructureBucketName" }
                S3Key: { "Fn::Sub": [ "lambdas/users/${TemplateVersion}/apigateway.zip", {
                    TemplateVersion: { "Fn::FindInMap": [ "TemplateVersion", "Self", "Commit" ] }
                } ] }
            Environment:
                Variables:
                    ENVIRONMENT: { Ref: 'Environment' }
                    AWS_ACCOUNT_ID: { Ref: "AWS::AccountId" }
            Handler: "apigateway.handler"
            Runtime: "python3.6"
            Timeout: "30"
            Role: { "Fn::GetAtt" : [ "ApiGatewayLambdaExecutionRole", "Arn" ] }
            FunctionName: { "Fn::Sub": "users-${Environment}-apigateway-execute" }
            Tags:
              - { Key: "Name", Value: { "Fn::Sub": "users-${Environment}-apigateway-execute" } }
              - { Key: "Management", Value: "managed" }
              - { Key: "Project", Value: "users" }
              - { Key: "Environment", Value: { Ref: "Environment" } }
              - { Key: "Service", Value: "apigateway" }
            TracingConfig:
                Mode: "Active"

    ApigatewayStack:
        Type: "AWS::CloudFormation::Stack"
        Properties:
            Parameters:
                Project: "users"
                Environment: { Ref: "Environment" }
                Service: "apigateway"
                LambdaArn: { "Fn::GetAtt": [ "ApiGatewayLambda", "Arn" ] }
                CustomAuthLambdaArn: { "Fn::GetAtt": [ "CustomAuthLambda", "Arn" ] }
                CreateCustomDomain: "true"
            Tags:
              - { Key: "Name", Value: { "Fn::Sub": "users-${Environment}-apigateway" } }
              - { Key: "Management", Value: "managed" }
              - { Key: "Project", Value: "users" }
              - { Key: "Environment", Value: { Ref: "Environment" } }
              - { Key: "Service", Value: "apigateway" }
            TemplateURL: { "Fn::Sub": [ "https://s3.amazonaws.com/${InfrastructureBucketName}/cloudformation/infrastructure/${TemplateVersion}/apigateway.yaml", {
                InfrastructureBucketName: { "Fn::ImportValue": "InfrastructureBucketName" },
                TemplateVersion: { "Fn::FindInMap": [ "TemplateVersion", "Infrastructure", "Commit" ] }
            } ] }
            TimeoutInMinutes: 30

    ##########################################################################################################
    ##  OUTPUTS
    ##########################################################################################################

Outputs:

    CustomAuthLambdaArn:
        Description: "The ARN of the Lambda function that can be used as a custom authorizer in API Gateway"
        Value: { "Fn::GetAtt": [ "CustomAuthLambda", "Arn" ] }
        Export:
            Name: { "Fn::Sub": "users-${Environment}-CustomAuthLambdaArn" }
