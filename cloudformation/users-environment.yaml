# A template that creates a Users service
# Version: da39a3ee5e6b4b0d3255bfef95601890afd80709
#
# Copyright 2017 Melon Software Ltd (UK), all rights reserved.  Used under license.
#
AWSTemplateFormatVersion: "2010-09-09"
Description: "Creates an environment for user management"

Parameters:

    # Environment name
    Environment:
        Type: "String"
        Description: "The name of the environment"

    # Plan API version
    PlansApiVersion: 
        Type: "String"
        Default: "4_3"
        Description: "Corresponding Plans API version"
    # The second part of the CIDR block for the VPN (10.xx.0.0/24).
    VpnCidr:
        Type: "Number"
        MinValue: 0
        MaxValue: 255
        Default: "2"
        Description: "The second digit in the IP range (10.xx.0.0/16).  VPNs with overlapping address spaces cannot be peered."
    PeeringId:
        Type: "String"
        Default: ""
        AllowedPattern: "^(vpc|pcx)-[a-z0-9]+|$"
        Description: "VPC ID to create a new peering connection to, or Peering Connection ID to add routes to an existing connection"
    PeeringCidr:
        Type: "String"
        Description: "The CIDR range in the peered VPC to route"
        Default: ""
        AllowedPattern: "^((\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})/(\\d{1,2}))|$"
        ConstraintDescription: "Must be a valid IP CIDR range of the form x.x.x.x/x."

    DynamodbReadCapacity:
        Default: 1
        Description: "The read capacity of the DynamoDb table"
        MinValue: 1
        Type: "Number"

    DynamodbWriteCapacity:
        Default: 1
        Description: "The write capacity of the DynamoDb table"
        MinValue: 1
        Type: "Number"

    SnsApplicationArnIos:
        Default: ""
        Description: "The ARN of the SNS application for mobile pushes via APN"
        Type: "String"

    SnsApplicationArnAndroid:
        Default: ""
        Description: "The ARN of the SNS application for mobile pushes via GCM"
        Type: "String"

Mappings:
    TemplateVersion:
        Self: { Commit: "da39a3ee5e6b4b0d3255bfef95601890afd80709" }
        Infrastructure: { Commit: "db769e7534f71b09ae6dc8a50b902a0fef788139" }

Metadata:
    "AWS::CloudFormation::Interface":
        ParameterGroups:
          - Label: { default: "Environment" }
            Parameters:
              - "Environment"
          - Label: { default: "Networking" }
            Parameters:
              - "VpnCidr"
              - "PeeringId"
              - "PeeringCidr"

        ParameterLabels:
            Environment: { default: "Environment" }
            VpnCidr: { default: "VPN CIDR block" }
            PeeringId: { default: "Peering VPC ID" }
            PeeringCidr: { default: "Peering CIDR" }

Conditions:
    CreateVpc: { "Fn::Not": [ { "Fn::Equals": [ { Ref: "PeeringCidr" }, "" ] } ] }

Resources:

    ##########################################################################################################
    ## VPC & NETWORKING
    ##########################################################################################################

    VpcStack:
        Type: "AWS::CloudFormation::Stack"
        Properties:
            Parameters:
                Environment: { Ref: "Environment" }
                SubnetConfiguration: "Public A/B, Private A/B"
                PeeringCidr: { Ref: "PeeringCidr" }
                PeeringId: { Ref: "PeeringId" }
                Project: "users"
                Service: "vpc"
                VpnCidr: { Ref: "VpnCidr" }
            Tags:
              - { Key: "Name", Value: { "Fn::Sub": "users-${Environment}-execute" } }
              - { Key: "Management", Value: "managed" }
              - { Key: "Project", Value: "users" }
              - { Key: "Environment", Value: { Ref: "Environment" } }
              - { Key: "Service", Value: "vpc" }
            TemplateURL: { "Fn::Sub": [ "https://s3.amazonaws.com/${InfrastructureBucketName}/cloudformation/infrastructure/${TemplateVersion}/vpc.yaml", {
                InfrastructureBucketName: { "Fn::ImportValue": "InfrastructureBucketName" },
                TemplateVersion: { "Fn::FindInMap": [ "TemplateVersion", "Infrastructure", "Commit" ] }
            } ] }
            TimeoutInMinutes: 10
        Condition: "CreateVpc"

    ##########################################################################################################
    ##  DATABASE
    ##########################################################################################################

    UsersCognitoUserPool:
        Type: "AWS::Cognito::UserPool"
        Properties:
            AdminCreateUserConfig:
                AllowAdminCreateUserOnly: true
            Policies:
                PasswordPolicy:
                    MinimumLength: 8
                    RequireLowercase: false
                    RequireNumbers: true
                    RequireSymbols: false
                    RequireUppercase: false
            UserPoolName: { "Fn::Sub": "users-${Environment}-users" }
            Schema:
              - Name: 'role'
                AttributeDataType: 'String'
                Mutable: true
                Required: false
                StringAttributeConstraints:
                    MinLength: '1'
                    MaxLength: '256'
            UsernameAttributes:
              - 'email'
            UserPoolTags:
                Name: { "Fn::Sub": "users-${Environment}-users" }
                Management: "managed"
                Project: "users"
                Environment: { Ref: "Environment" }
                Service: "users"
            EmailConfiguration:
                SourceArn: { "Fn::Sub": "arn:aws:ses:${AWS::Region}:${AWS::AccountId}:identity/hello@fathomai.com" }
            EmailVerificationSubject: 'Password Reset'
            EmailVerificationMessage: |
                <p>Hello,
                <p>We have received your request for a password reset. Please enter the following 6-digit PIN in the Fathom mobile app to update your password.
                <p><b>PIN: {####}</b>
                <p>Your new password must include:
                <ul>
                    <li>8-16 characters
                    <li>at least 1 number
                </ul>
                <p>If you did not initiate this password reset, please contact us at <a href="mailto:hello@fathomai.com">hello@fathomai.com</a>.
                <p>Thanks,
                <p>The Fathom Team
        DeletionPolicy : "Retain"

    UsersCognitoUserPoolClient:
        Type: "AWS::Cognito::UserPoolClient"
        Properties:
            ClientName: { "Fn::Sub": "users-${Environment}-login" }
            ExplicitAuthFlows:
              - "ADMIN_NO_SRP_AUTH"
            GenerateSecret: false
            ReadAttributes:
              - "custom:role"
            RefreshTokenValidity: 3650
            UserPoolId: { Ref: "UsersCognitoUserPool" }

    UsersTable:
        Type: "AWS::DynamoDB::Table"
        Properties:
            TableName: { "Fn::Sub": "users-${Environment}-users" }
            AttributeDefinitions:
              - { AttributeName: "id", AttributeType: "S" }
            KeySchema:
              - { AttributeName: "id", KeyType: "HASH" }
            BillingMode: "PAY_PER_REQUEST"
            Tags:
              - { Key: "Name", Value: { "Fn::Sub": "users-${Environment}-users" } }
              - { Key: "Management", Value: "managed" }
              - { Key: "Project", Value: "users" }
              - { Key: "Environment", Value: { Ref: "Environment" } }
              - { Key: "Service", Value: "database" }
        DeletionPolicy : "Retain"

    PushNotificationsTable:
        Type: "AWS::DynamoDB::Table"
        Properties:
            TableName: { "Fn::Sub": "users-${Environment}-pushnotifications" }
            AttributeDefinitions:
              - { AttributeName: "user_id", AttributeType: "S" }
              - { AttributeName: "message_hash", AttributeType: "S" }
            KeySchema:
              - { AttributeName: "user_id", KeyType: "HASH" }
              - { AttributeName: "message_hash", KeyType: "RANGE" }
            BillingMode: "PAY_PER_REQUEST"
            Tags:
              - { Key: "Name", Value: { "Fn::Sub": "users-${Environment}-pushnotifications" } }
              - { Key: "Management", Value: "managed" }
              - { Key: "Project", Value: "users" }
              - { Key: "Environment", Value: { Ref: "Environment" } }
              - { Key: "Service", Value: "pushnotifications" }
            TimeToLiveSpecification:
                Enabled: true
                AttributeName: 'expires_timestamp'
        DeletionPolicy : "Retain"

    AccountsTable:
        Type: "AWS::DynamoDB::Table"
        Properties:
            TableName: { "Fn::Sub": "users-${Environment}-accounts" }
            AttributeDefinitions:
              - { AttributeName: "id", AttributeType: "S" }
            KeySchema:
              - { AttributeName: "id", KeyType: "HASH" }
            BillingMode: "PAY_PER_REQUEST"
            Tags:
              - { Key: "Name", Value: { "Fn::Sub": "users-${Environment}-accounts" } }
              - { Key: "Management", Value: "managed" }
              - { Key: "Project", Value: "users" }
              - { Key: "Environment", Value: { Ref: "Environment" } }
              - { Key: "Service", Value: "accounts" }
        DeletionPolicy : "Retain"

    AccountCodesTable:
        Type: "AWS::DynamoDB::Table"
        Properties:
            TableName: { "Fn::Sub": "users-${Environment}-account-codes" }
            AttributeDefinitions:
              - { AttributeName: "code", AttributeType: "S" }
              - { AttributeName: "account_id", AttributeType: "S" }
            KeySchema:
              - { AttributeName: "code", KeyType: "HASH" }
            BillingMode: "PAY_PER_REQUEST"
            GlobalSecondaryIndexes:
              - IndexName: "account_id"
                KeySchema:
                  - { AttributeName: "account_id", KeyType: "HASH" }
                Projection:
                    ProjectionType: "ALL"
            Tags:
              - { Key: "Name", Value: { "Fn::Sub": "users-${Environment}-account-codes" } }
              - { Key: "Management", Value: "managed" }
              - { Key: "Project", Value: "users" }
              - { Key: "Environment", Value: { Ref: "Environment" } }
              - { Key: "Service", Value: "accounts" }
        DeletionPolicy : "Retain"

    ##########################################################################################################
    ##  IOT
    ##########################################################################################################

    DevicePolicy:
        Type: "AWS::IoT::Policy"
        Properties:
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: "Allow"
                Action:
                  - "iot:Connect"
                Resource:
                  - "*"
              - Effect: "Allow"
                Action:
                  - "iot:Publish"
                  - "iot:Subscribe"
                Resource:
                  - { "Fn::Sub": "arn:aws:iot:${AWS::Region}:${AWS::AccountId}:topic/users/${Environment}/device/${!iot:Connection.Thing.ThingName}" }
                  - { "Fn::Sub": "arn:aws:iot:${AWS::Region}:${AWS::AccountId}:topic/users/${Environment}/device/${!iot:Connection.Thing.ThingName}/*" }
                  - { "Fn::Sub": "arn:aws:iot:${AWS::Region}:${AWS::AccountId}:topic/users/${Environment}/user/${!iot:Connection.Thing.Attributes[owner_id]}" }
                  - { "Fn::Sub": "arn:aws:iot:${AWS::Region}:${AWS::AccountId}:topic/users/${Environment}/user/${!iot:Connection.Thing.Attributes[owner_id]}/*" }
                  - { "Fn::Sub": "arn:aws:iot:${AWS::Region}:${AWS::AccountId}:topic/plans/${Environment}/athlete/${!iot:Connection.Thing.Attributes[owner_id]}" }
                  - { "Fn::Sub": "arn:aws:iot:${AWS::Region}:${AWS::AccountId}:topic/plans/${Environment}/athlete/${!iot:Connection.Thing.Attributes[owner_id]}/*" }

    PushStreamRule:
        Type: "AWS::IoT::TopicRule"
        Properties:
            RuleName: { "Fn::Sub": "users_${Environment}_device_pushstream" }
            TopicRulePayload:
                RuleDisabled: "false"
                AwsIotSqlVersion: '2016-03-23'
                Sql: { "Fn::Sub": "SELECT * AS payload, topic() AS topic, principal() AS principal FROM '+/${Environment}/#'" }
                Actions:
                  - Lambda:
                        FunctionArn: { "Fn::GetAtt": [ "PushStreamLambda", "Arn" ] }

    PushStreamLambda:
        Type: "AWS::Lambda::Function"
        Properties:
            Code:
                ZipFile: |
                    import boto3, botocore, botocore.exceptions, json, os, re
                    iot_client = boto3.client('iot')
                    iotd_client = boto3.client('iot-data')
                    sns_client = boto3.client('sns')

                    def handler(event, _):
                        print(json.dumps(event))
                        topic_parts = event['topic'].split('/')

                        if match_mqtt_topic('plans/+/athlete/+/daily_plan', event['topic']):
                            print('Republishing IoT topic notification via SNS')
                            owner_id = topic_parts[3]
                            things = iot_client.list_things(attributeName='owner_id', attributeValue=owner_id)['things']
                            if len(things):
                                for thing in things:
                                    device_id = thing['thingName']
                                    sns_endpoint = thing['attributes'].get('push_notifications.endpoint', thing['attributes'].get('push_notifications_endpoint', None))
                                    sns_enabled = thing['attributes'].get('push_notifications.enabled', True)
                                    if sns_endpoint is not None:
                                        if sns_enabled:
                                            print('Sending notification to endpoint {}'.format(sns_endpoint))
                                            payload = {
                                                'default': 'Your plan is ready!',
                                                'GCM': {
                                                    "data": {
                                                        "message": "Your plan is ready!",
                                                        "target": event['topic']
                                                    },
                                                    "time_to_live": 3600,
                                                    "collapse_key": "plan_updated"
                                                },
                                                "APNS": {
                                                    "aps": {
                                                        "alert": "Your plan is ready!",
                                                        "sound": "default",
                                                        "badge": 1,
                                                        "category": "YOUR_CUSTOM_CATEGORY",
                                                        "content-available": 1
                                                    }
                                                }
                                            }
                                            try:
                                                sns_client.publish(TargetArn=sns_endpoint, Message=json.dumps(payload), MessageStructure='json')
                                            except botocore.exceptions.ClientError as e:
                                                if 'EndpointDisabled' in str(e):
                                                    print('Endpoint disabled!')
                                                else:
                                                    raise e
                                        else:
                                            print('Push notifications disabled for device {}'.foramt(device_id))
                                    else:
                                        print('No push notification endpoint configured for device {}'.format(device_id))
                            else:
                                print('No devices registered for user {}'.format(owner_id))

                    def match_mqtt_topic(pattern, topic):
                        pattern = pattern.replace('+', '[^/]+').replace('#', '.+')
                        return re.match(pattern, topic)

            Environment:
                Variables:
                    ENVIRONMENT: { Ref: "Environment" }
                    SNS_APPLICATION_ARN_IOS: { Ref: "SnsApplicationArnIos" }
                    SNS_APPLICATION_ARN_ANDROID: { Ref: "SnsApplicationArnAndroid" }
            Handler: "index.handler"
            MemorySize: "256"
            Runtime: "python3.6"
            Timeout: "60"
            Role: { "Fn::GetAtt" : [ "ApiGatewayLambdaExecutionRole", "Arn" ] }
            FunctionName: { "Fn::Sub": "users-${Environment}-device-pushstream" }
            Tags:
              - { Key: "Name", Value: { "Fn::Sub": "users-${Environment}-device-pushstream" } }
              - { Key: "Management", Value: "managed" }
              - { Key: "Project", Value: "users" }
              - { Key: "Environment", Value: { Ref: "Environment" } }
              - { Key: "Service", Value: "device" }

    PushStreamLambdaLambdaInvokePermission:
        Type: "AWS::Lambda::Permission"
        Properties:
            Action: "lambda:InvokeFunction"
            Principal: "iot.amazonaws.com"
            SourceArn: { "Fn::GetAtt": [ "PushStreamRule", "Arn" ] }
            FunctionName: { "Fn::GetAtt": [ "PushStreamLambda", "Arn" ] }

    ##########################################################################################################
    ##  IOT MONITORING
    ##########################################################################################################

    IotEnvironmentFilterLambdaExecutionRole:
        Type: "AWS::IAM::Role"
        Properties:
            AssumeRolePolicyDocument:
                Version: "2012-10-17"
                Statement:
                  - Effect: "Allow"
                    Principal: { Service: [ "lambda.amazonaws.com" ] }
                    Action: "sts:AssumeRole"
            ManagedPolicyArns:
              - "arn:aws:iam::aws:policy/service-role/AWSLambdaVPCAccessExecutionRole"
            Policies:
              - PolicyName: "default"
                PolicyDocument:
                    Version: "2012-10-17"
                    Statement:
                      - Action:
                          - "iot:DescribeThing"
                        Effect: "Allow"
                        Resource: "*"
            RoleName: { "Fn::Sub": "users-${Environment}-device-iotenvironmentfilter-${AWS::Region}" }

    IotEnvironmentFilterLambda:
        Type: "AWS::Lambda::Function"
        Properties:
            Code:
                ZipFile: |
                    import boto3
                    iot_client = boto3.client('iot')
                    def handler(event, _):
                        device_attributes = iot_client.describe_thing(thingName=event['thing_name'])
                        return {'environment': device_attributes['thingTypeName'].split('-')[1]}
            Handler: "index.handler"
            MemorySize: "256"
            Runtime: "python3.6"
            Timeout: "60"
            Role: { "Fn::GetAtt" : [ "IotEnvironmentFilterLambdaExecutionRole", "Arn" ] }
            FunctionName: { "Fn::Sub": "users-${Environment}-device-iotenvironmentfilter" }
            Tags:
              - { Key: "Name", Value: { "Fn::Sub": "users-${Environment}-device-iotenvironmentfilter" } }
              - { Key: "Management", Value: "managed" }
              - { Key: "Project", Value: "users" }
              - { Key: "Environment", Value: { Ref: "Environment" } }
              - { Key: "Service", Value: "device" }

    IotEnvironmentFilterLambdaInvokePermission:
        Type: "AWS::Lambda::Permission"
        Properties:
            Action: "lambda:InvokeFunction"
            Principal: "iot.amazonaws.com"
            FunctionName: { "Fn::GetAtt": [ "IotEnvironmentFilterLambda", "Arn" ] }

    ConnectionMonitoringTopicRule:
        Type: "AWS::IoT::TopicRule"
        Properties:
            RuleName: { "Fn::Sub": "users_${Environment}_device_connectionmonitoring" }
            TopicRulePayload:
                RuleDisabled: "false"
                AwsIotSqlVersion: '2016-03-23'
                Sql: { "Fn::Sub": "
                    SELECT * AS payload, traceid() AS trace_id
                    FROM '$aws/events/presence/connected/#'
                    WHERE aws_lambda('arn:aws:lambda:us-west-2:887689817172:function:users-dev-device-iotenvironmentfilter', {'thing_name': clientId}).environment = '${Environment}'" }
                Actions:
                  - Lambda:
                        FunctionArn: { "Fn::GetAtt": [ "ConnectionMonitoringTopicLambda", "Arn" ] }

    ConnectionMonitoringCloudwatchLogsGroup:
        Type: "AWS::Logs::LogGroup"
        Properties:
            LogGroupName: { "Fn::Sub": "/biometrix/users/${Environment}/device-connect" }
            RetentionInDays: 180

    ConnectionMonitoringTopicLambda:
        Type: "AWS::Lambda::Function"
        Properties:
            Code:
                ZipFile: |
                    import boto3, json, os
                    iot_client = boto3.client('iot')
                    logs_client = boto3.client('logs')

                    def handler(event, _):
                        device_id = event['payload']['clientId']
                        device_attributes = iot_client.describe_thing(thingName=device_id)
                        payload = {
                            'device_id': device_id,
                            'certificate_id': event['payload']['principalIdentifier'],
                            'owner_id': device_attributes['attributes'].get('owner_id', None),
                        }
                        logs_client.create_log_stream(
                            logGroupName=os.environ['LOG_GROUP_NAME'],
                            logStreamName=event['trace_id']
                        )
                        logs_client.put_log_events(
                            logGroupName=os.environ['LOG_GROUP_NAME'],
                            logStreamName=event['trace_id'],
                            logEvents=[{'timestamp': event['payload']['timestamp'], 'message': json.dumps(payload)}],
                        )

            Environment:
                Variables:
                    ENVIRONMENT: { Ref: "Environment" }
                    LOG_GROUP_NAME: { Ref: "ConnectionMonitoringCloudwatchLogsGroup" }
            Handler: "index.handler"
            MemorySize: "256"
            Runtime: "python3.6"
            Timeout: "60"
            Role: { "Fn::GetAtt" : [ "ApiGatewayLambdaExecutionRole", "Arn" ] }
            FunctionName: { "Fn::Sub": "users-${Environment}-device-connectionmonitoringstream" }
            Tags:
              - { Key: "Name", Value: { "Fn::Sub": "users-${Environment}-device-connectionmonitoringstream" } }
              - { Key: "Management", Value: "managed" }
              - { Key: "Project", Value: "users" }
              - { Key: "Environment", Value: { Ref: "Environment" } }
              - { Key: "Service", Value: "device" }

    ConnectionMonitoringTopicLambdaInvokePermission:
        Type: "AWS::Lambda::Permission"
        Properties:
            Action: "lambda:InvokeFunction"
            Principal: "iot.amazonaws.com"
            SourceArn: { "Fn::GetAtt": [ "ConnectionMonitoringTopicRule", "Arn" ] }
            FunctionName: { "Fn::GetAtt": [ "ConnectionMonitoringTopicLambda", "Arn" ] }

    ##########################################################################################################
    ##  AUTHENTICATION
    ##########################################################################################################

    CustomAuthLambdaExecutionRole:
        Type: "AWS::IAM::Role"
        Properties:
            AssumeRolePolicyDocument:
                Version: "2012-10-17"
                Statement:
                  - Effect: "Allow"
                    Principal: { Service: [ "lambda.amazonaws.com" ] }
                    Action: "sts:AssumeRole"
            ManagedPolicyArns:
              - "arn:aws:iam::aws:policy/service-role/AWSLambdaVPCAccessExecutionRole"
              - "arn:aws:iam::aws:policy/AWSXrayWriteOnlyAccess"
            Policies:
              - PolicyName: "default"
                PolicyDocument:
                    Version: "2012-10-17"
                    Statement:
                      - Action:
                          - "secretsmanager:GetSecretValue"
                        Effect: "Allow"
                        Resource: { "Fn::Sub": "arn:aws:secretsmanager:${AWS::Region}:${AWS::AccountId}:secret:users/${Environment}/*" }
            RoleName: { "Fn::Sub": "users-${Environment}-apigateway-authenticate-${AWS::Region}" }

    ValidateAuthLambda:
        Type: "AWS::Lambda::Function"
        Properties:
            Code:
                S3Bucket: { "Fn::Sub": "biometrix-infrastructure-${AWS::Region}" }
                S3Key: { "Fn::Sub": [ "lambdas/users/${TemplateVersion}/custom_auth.zip", {
                    TemplateVersion: { "Fn::FindInMap": [ "TemplateVersion", "Self", "Commit" ] }
                } ] }
            Environment:
                Variables:
                    ENVIRONMENT: { Ref: 'Environment' }
            Handler: "custom_auth.validate_handler"
            Runtime: "python3.6"
            Timeout: "10"
            Role: { "Fn::GetAtt" : [ "CustomAuthLambdaExecutionRole", "Arn" ] }
            FunctionName: { "Fn::Sub": "users-${Environment}-apigateway-validateauth" }
            Tags:
              - { Key: "Name", Value: { "Fn::Sub": "users-${Environment}-apigateway-validateauth" } }
              - { Key: "Management", Value: "managed" }
              - { Key: "Project", Value: "users" }
              - { Key: "Environment", Value: { Ref: "Environment" } }
              - { Key: "Service", Value: "apigateway" }
            TracingConfig:
                Mode: "Active"

    ServiceAuthLambda:
        Type: "AWS::Lambda::Function"
        Properties:
            Code:
                S3Bucket: { "Fn::Sub": "biometrix-infrastructure-${AWS::Region}" }
                S3Key: { "Fn::Sub": [ "lambdas/users/${TemplateVersion}/custom_auth.zip", {
                    TemplateVersion: { "Fn::FindInMap": [ "TemplateVersion", "Self", "Commit" ] }
                } ] }
            Environment:
                Variables:
                    ENVIRONMENT: { Ref: 'Environment' }
            Handler: "custom_auth.service_handler"
            Runtime: "python3.6"
            Timeout: "10"
            Role: { "Fn::GetAtt" : [ "CustomAuthLambdaExecutionRole", "Arn" ] }
            FunctionName: { "Fn::Sub": "users-${Environment}-apigateway-serviceauth" }
            Tags:
              - { Key: "Name", Value: { "Fn::Sub": "users-${Environment}-apigateway-serviceauth" } }
              - { Key: "Management", Value: "managed" }
              - { Key: "Project", Value: "users" }
              - { Key: "Environment", Value: { Ref: "Environment" } }
              - { Key: "Service", Value: "apigateway" }
            TracingConfig:
                Mode: "Active"

    ValidateAuthExecutionPolicy:
        Type: "AWS::IAM::ManagedPolicy"
        Properties:
            Description: "Allows entities to call the Lambda function to validate authentication tokens"
            ManagedPolicyName: { "Fn::Sub": "users-${Environment}-validateauth" }
            Path: "/"
            PolicyDocument:
                Version: "2012-10-17"
                Statement:
                  - Action:
                      - "lambda:InvokeFunction"
                    Effect: "Allow"
                    Resource:
                      - { "Fn::Sub": "${ValidateAuthLambda.Arn}" }
                      - { "Fn::Sub": "${ValidateAuthLambda.Arn}:1_0" }
                      - { "Fn::Sub": "${ValidateAuthLambda.Arn}:1_1" }
                      - { "Fn::Sub": "${ValidateAuthLambda.Arn}:2_0" }  # FIXME work out how to wildcard this

    ServiceAuthExecutionPolicy:
        Type: "AWS::IAM::ManagedPolicy"
        Properties:
            Description: "Allows entities to call the Lambda function to create authentication tokens"
            ManagedPolicyName: { "Fn::Sub": "users-${Environment}-serviceauth" }
            Path: "/"
            PolicyDocument:
                Version: "2012-10-17"
                Statement:
                  - Action:
                      - "lambda:InvokeFunction"
                    Effect: "Allow"
                    Resource:
                      - { "Fn::Sub": "${ServiceAuthLambda.Arn}" }
                      - { "Fn::Sub": "${ServiceAuthLambda.Arn}:1_0" }
                      - { "Fn::Sub": "${ServiceAuthLambda.Arn}:1_1" }
                      - { "Fn::Sub": "${ServiceAuthLambda.Arn}:2_0" }

    ##########################################################################################################
    ##  LAMBDA
    ##########################################################################################################

    ApiGatewayLambdaExecutionRole:
        Type: "AWS::IAM::Role"
        Properties:
            AssumeRolePolicyDocument:
                Version: "2012-10-17"
                Statement:
                  - Effect: "Allow"
                    Principal: { Service: [ "lambda.amazonaws.com" ] }
                    Action: "sts:AssumeRole"
            ManagedPolicyArns:
              - "arn:aws:iam::aws:policy/service-role/AWSLambdaVPCAccessExecutionRole"
              - "arn:aws:iam::aws:policy/AWSXrayWriteOnlyAccess"
              - { Ref: "ValidateAuthExecutionPolicy" }
              - { Ref: "ServiceAuthExecutionPolicy" }
              - { "Fn::ImportValue": { "Fn::Sub": "QuerypostgresPolicyArn-${Environment}" } }
            Policies:
              - PolicyName: "default"
                PolicyDocument:
                    Version: "2012-10-17"
                    Statement:
                      - Action:
                          - "lambda:InvokeFunction"
                        Effect: "Allow"
                        Resource:
                          - { "Fn::Sub": "arn:aws:lambda:${AWS::Region}:${AWS::AccountId}:function:users-${Environment}-apigateway-authenticate" }
                      - Action:
                          - "secretsmanager:GetSecretValue"
                        Effect: "Allow"
                        Resource: { "Fn::Sub": "arn:aws:secretsmanager:${AWS::Region}:${AWS::AccountId}:secret:users/${Environment}/*" }
                      - Action:
                          - "cognito-idp:AdminCreateUser"
                          - "cognito-idp:AdminDeleteUser"
                          - "cognito-idp:AdminDeleteUserAttributes"
                          - "cognito-idp:AdminGetUser"
                          - "cognito-idp:AdminInitiateAuth"
                          - "cognito-idp:AdminRespondToAuthChallenge"
                          - "cognito-idp:AdminUpdateUserAttributes"
                          - "cognito-idp:AdminUserGlobalSignOut"
                          - "cognito-idp:ListUsers"
                        Effect: "Allow"
                        Resource: { "Fn::GetAtt": [ "UsersCognitoUserPool", "Arn" ] }
                      - Action:
                          - "dynamodb:BatchGetItem"
                          - "dynamodb:DeleteItem"
                          - "dynamodb:GetItem"
                          - "dynamodb:PutItem"
                          - "dynamodb:Query"
                          - "dynamodb:UpdateItem"
                        Effect: "Allow"
                        Resource:
                          - { "Fn::Sub": "${UsersTable.Arn}" }
                          - { "Fn::Sub": "${UsersTable.Arn}/*" }
                          - { "Fn::Sub": "${PushNotificationsTable.Arn}" }
                          - { "Fn::Sub": "${PushNotificationsTable.Arn}/*" }
                          - { "Fn::Sub": "${AccountsTable.Arn}" }
                          - { "Fn::Sub": "${AccountsTable.Arn}/*" }
                          - { "Fn::Sub": "${AccountCodesTable.Arn}" }
                          - { "Fn::Sub": "${AccountCodesTable.Arn}/*" }
                      - Action:
                          - "iot:AddThingToThingGroup"
                          - "iot:AttachPrincipalPolicy"
                          - "iot:AttachThingPrincipal"
                          - "iot:CreateKeysAndCertificate"
                          - "iot:CreateThing"
                          - "iot:DescribeThing"
                          - "iot:ListThings"
                          - "iot:UpdateThing"
                          - "iot:Publish"
                          - "sns:CreatePlatformEndpoint"
                          - "sns:DeleteEndpoint"
                          - "sns:Publish"
                          - "sqs:ListQueues"
                          - "sqs:SendMessage"
                          - "ses:SendEmail"
                          - "ses:SendRawEmail"
                        Effect: "Allow"
                        Resource: "*"
            RoleName: { "Fn::Sub": "users-${Environment}-apigateway-execute-${AWS::Region}" }

    LambdaVpcSecurityGroup:
        Type: "AWS::EC2::SecurityGroup"
        Properties:
            GroupDescription: "Security group which allows access for AWS Lambda"
            GroupName: { "Fn::Sub": "users-${Environment}-apigateway-execute" }
            SecurityGroupIngress:
                # All ports open from internal access
              - IpProtocol: "tcp"
                FromPort: "0"
                ToPort: "65535"
                CidrIp: "0.0.0.0/0"
            Tags:
              - { Key: "Name", Value: { "Fn::Sub": "users-${Environment}-apigateway-execute" } }
              - { Key: "Management", Value: "managed" }
              - { Key: "Project", Value: "users" }
              - { Key: "Environment", Value: { Ref: "Environment" } }
              - { Key: "Service", Value: "apigateway" }
            VpcId: { "Fn::GetAtt": [ "VpcStack", "Outputs.VpcId" ] }
        Condition: "CreateVpc"

    ApiGatewayLambda:
        Type: "AWS::Lambda::Function"
        Properties:
            Code:
                S3Bucket: { "Fn::ImportValue": "InfrastructureBucketName" }
                S3Key: { "Fn::Sub": [ "lambdas/users/${TemplateVersion}/apigateway.zip", {
                    TemplateVersion: { "Fn::FindInMap": [ "TemplateVersion", "Self", "Commit" ] }
                } ] }
            Environment:
                Variables:
                    SERVICE: 'users'
                    ENVIRONMENT: { Ref: 'Environment' }
                    AWS_ACCOUNT_ID: { Ref: "AWS::AccountId" }
                    IOT_POLICY_NAME: { Ref: "DevicePolicy" }
                    SNS_APPLICATION_ARN_IOS: { Ref: "SnsApplicationArnIos" }
                    SNS_APPLICATION_ARN_ANDROID: { Ref: "SnsApplicationArnAndroid" }
                    USERS_DYNAMODB_TABLE_NAME: { Ref: "UsersTable" }
                    USERS_COGNITO_USER_POOL_ID: { Ref: "UsersCognitoUserPool" }
                    USERS_COGNITO_USER_POOL_CLIENT_ID: { Ref: "UsersCognitoUserPoolClient" }
                    PUSHNOTIFICATIONS_DYNAMODB_TABLE_NAME: { Ref: "PushNotificationsTable" }
                    ACCOUNTCODES_DYNAMODB_TABLE_NAME: { Ref: "AccountCodesTable" }
                    ACCOUNTS_DYNAMODB_TABLE_NAME: { Ref: "AccountsTable" }
                    PLANS_API_VERSION: {Ref: "PlansApiVersion"}
            Handler: "apigateway.handler"
            Runtime: "python3.6"
            Timeout: "30"
            Role: { "Fn::GetAtt" : [ "ApiGatewayLambdaExecutionRole", "Arn" ] }
            FunctionName: { "Fn::Sub": "users-${Environment}-apigateway-execute" }
            Tags:
              - { Key: "Name", Value: { "Fn::Sub": "users-${Environment}-apigateway-execute" } }
              - { Key: "Management", Value: "managed" }
              - { Key: "Project", Value: "users" }
              - { Key: "Environment", Value: { Ref: "Environment" } }
              - { Key: "Service", Value: "apigateway" }
            TracingConfig:
                Mode: "Active"
            VpcConfig: { "Fn::If": [
                "CreateVpc",
                {
                    SubnetIds: { "Fn::Split": [ ",", { "Fn::GetAtt": [ "VpcStack", "Outputs.PrivateSubnetIds" ] } ] },
                    SecurityGroupIds: [ { Ref: "LambdaVpcSecurityGroup" } ]
                },
                { Ref: "AWS::NoValue" }
            ]}

    ApigatewayStack:
        Type: "AWS::CloudFormation::Stack"
        Properties:
            Parameters:
                Project: "users"
                Environment: { Ref: "Environment" }
                Service: "apigateway"
                LambdaArn: { "Fn::GetAtt": [ "ApiGatewayLambda", "Arn" ] }
                CreateAsync: "true"
            Tags:
              - { Key: "Name", Value: { "Fn::Sub": "users-${Environment}-apigateway" } }
              - { Key: "Management", Value: "managed" }
              - { Key: "Project", Value: "users" }
              - { Key: "Environment", Value: { Ref: "Environment" } }
              - { Key: "Service", Value: "apigateway" }
            TemplateURL: { "Fn::Sub": [ "https://s3.amazonaws.com/${InfrastructureBucketName}/cloudformation/infrastructure/${TemplateVersion}/apigateway.yaml", {
                InfrastructureBucketName: { "Fn::ImportValue": "InfrastructureBucketName" },
                TemplateVersion: { "Fn::FindInMap": [ "TemplateVersion", "Infrastructure", "Commit" ] }
            } ] }
            TimeoutInMinutes: 30

    ##########################################################################################################
    ##  DAILY SCHEDULER
    ##########################################################################################################

    DailySchedulerExecutionRole:
        Type: "AWS::IAM::Role"
        Properties:
            AssumeRolePolicyDocument:
                Version: "2012-10-17"
                Statement:
                  - Effect: "Allow"
                    Principal: { Service: [ "lambda.amazonaws.com" ] }
                    Action: "sts:AssumeRole"
            ManagedPolicyArns:
              - "arn:aws:iam::aws:policy/service-role/AWSLambdaVPCAccessExecutionRole"
              - "arn:aws:iam::aws:policy/AWSXrayWriteOnlyAccess"
              - { Ref: "ServiceAuthExecutionPolicy" }
            Policies:
              - PolicyName: "default"
                PolicyDocument:
                    Version: "2012-10-17"
                    Statement:
                      - Action:
                          - "sqs:SendMessage"
                        Effect: "Allow"
                        Resource:
                          - { "Fn::Sub": "arn:aws:sqs:${AWS::Region}:${AWS::AccountId}:users-${Environment}-apigateway-async" }
                      - Action:
                          - "sqs:ListQueues"
                        Effect: "Allow"
                        Resource: "*"
            RoleName: { "Fn::Sub": "users-${Environment}-apigateway-dailyscheduler-${AWS::Region}" }

    DailySchedulerLambda:
        Type: "AWS::Lambda::Function"
        Properties:
            Code:
                ZipFile: |
                    import boto3, json, os
                    _lambda_client = boto3.client('lambda')
                    _sqs_client = boto3.client('sqs')
                    def handler(_, __):
                        payload = {
                            "path": '/users/2_3/misc/dailycron',
                            "httpMethod": 'POST',
                            "headers": {
                                "Accept": "*/*",
                                "Authorization": get_service_token(),
                                "Content-Type": "application/json",
                                "User-Agent": "Biometrix/DailyScheduler",
                            },
                            "pathParameters": {"endpoint": 'misc/dailycron'},
                            "stageVariables": {"LambdaAlias": '2_3'},
                            "body": None,
                            "isBase64Encoded": False
                        }

                        _sqs_client.send_message(
                            QueueUrl='https://sqs.{AWS_REGION}.amazonaws.com/{AWS_ACCOUNT_ID}/users-{ENVIRONMENT}-apigateway-async'.format(**os.environ),
                            MessageBody=json.dumps(payload),
                        )

                    def get_service_token():
                        res = _lambda_client.invoke(FunctionName='users-{ENVIRONMENT}-apigateway-serviceauth:2_0'.format(**os.environ))
                        return json.loads(res['Payload'].read().decode('utf-8'))['token']

            Environment:
                Variables:
                    AWS_ACCOUNT_ID: { Ref: 'AWS::AccountId' }
                    ENVIRONMENT: { Ref: 'Environment' }
            Handler: "index.handler"
            MemorySize: "256"
            Runtime: "python3.6"
            Timeout: "30"
            Role: { "Fn::GetAtt" : [ "DailySchedulerExecutionRole", "Arn" ] }
            FunctionName: { "Fn::Sub": "users-${Environment}-apigateway-dailyscheduler" }
            Tags:
              - { Key: "Name", Value: { "Fn::Sub": "users-${Environment}-apigateway-dailyscheduler" } }
              - { Key: "Management", Value: "managed" }
              - { Key: "Project", Value: 'users' }
              - { Key: "Environment", Value: { Ref: "Environment" } }
              - { Key: "Service", Value: 'apigateway' }

    DailySchedulerScheduledRule:
        Type: "AWS::Events::Rule"
        Properties:
            Description: "ScheduledRule"
            ScheduleExpression: "cron(0 6 * * ? *)"  # 6am UTC every day
            State: "ENABLED"
            Targets:
              - Arn: { "Fn::GetAtt": [ "DailySchedulerLambda", "Arn" ] }
                Id: "target"

    DailySchedulerInvokePermission:
        Type: "AWS::Lambda::Permission"
        Properties:
            FunctionName: { "Fn::GetAtt": [ "DailySchedulerLambda", "Arn" ] }
            Action: "lambda:InvokeFunction"
            Principal: "events.amazonaws.com"
            SourceArn: { "Fn::GetAtt": [ "DailySchedulerScheduledRule", "Arn" ] }

    ##########################################################################################################
    ##  OUTPUTS
    ##########################################################################################################

Outputs:

    # TODO deprecate and remove
    CustomAuthLambdaArn:
        Description: "The ARN of the Lambda function that can be used as a custom authorizer in API Gateway"
        Value: { "Fn::Sub": "arn:aws:lambda:${AWS::Region}:${AWS::AccountId}:function:users-${Environment}-apigateway-authenticate" }
        Export:
            Name: { "Fn::Sub": "users-${Environment}-CustomAuthLambdaArn" }

    ValidateAuthPolicyArn:
        Description: "The ARN of the validateauth IAM Policy"
        Value: { Ref: "ValidateAuthExecutionPolicy" }
        Export:
            Name: { "Fn::Sub": "UsersValidateAuthPolicyArn-${Environment}" }

    ServiceAuthPolicyArn:
        Description: "The ARN of the serviceauth IAM Policy"
        Value: { Ref: "ServiceAuthExecutionPolicy" }
        Export:
            Name: { "Fn::Sub": "UsersServiceAuthPolicyArn-${Environment}" }
